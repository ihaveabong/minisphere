Cellscript API Reference
========================

Cell is a scriptable build system and compiler for Sphere games. Like Sphere
itself, it uses JavaScript to control the build process.  This file documents
the public API used to write build scripts.


SphereFS File System
--------------------

Cell, like miniSphere, uses the SphereFS standard for file paths.  Under
SphereFS, when a relative path is used in an API call, it will be resolved
relative to the entrypoint (in Cell, the location of Cellscript.js).  To load
files from a different location, you can use one of the SphereFS prefixes:

    @/: The root of the game package being compiled.
    ~/: The current user's save data directory, guaranteed to be writable.
        This prefix is meaningless in Cell and using it will cause a sandboxing
        violation error.
    #/: The Sphere system directory.  This contains assets included with the
        engine.  In most cases this directory is read-only.  Build scripts
        should NOT try to write anything here as doing so can damage the host
        miniSphere installation.

As an example, the following will open the file `EatyPig.bin` in the root of
the game package for writing in binary mode:

    var file = FS.open("@/EatyPig.bin", "wb");

Absolute paths are NOT allowed, and any attempt to circumvent the sandbox, e.g.
"@/../maggie.fat", will be met with a sandbox violation error.


Sphere v2 API
-------------

To make things easier for Sphere v2 developers, Cell provides a subset of the
Sphere v2 API and standard library for use in Cellscripts.  Specifically, the
following are provided:

    - Text Encoding API (`TextEncoder`, `TextDecoder` classes)
    - File System API (`FS` object, `FileStream` class)
    - Random Number Generator API (`RNG` class)

    - Several standard library modules:
        - `assert` module
        - `from` module
        - `random` module
        - `struct` module
        - `xml` module

Refer to `sphere2-api.txt` and/or `miniRT-api.txt` for more information on how
to use those APIs.


Core Cellscript API
-------------------

The functions and properties below are available for use at all times, by all
Cellscripts and modules.  No `require()` or `import` statements are necessary
to use them.

Sphere.Platform [read-only]

    The name of the compiler, "Cell".

Sphere.Version [read-only]

    The version number of the compiler; e.g., "X.X.X".

describe(title, metadata);

    Defines the basic set of data to include in the game manifest.  `title` is
    the title of the game being built and will be encoded as a property called
    `name` in the manifest.  Everything in `metadata` will be JSON encoded and
    the output stored in the manifest as-is.

    Note that all values written to the game manifest are accessible to
    Sphere v2 game code through `system.game`.  This provides a convenient
    mechanism to associate static data, such as debug flags, with a built game.

    Note: Values in `metadata` may be overridden by other parts of the build.
          For example, the 'transpile' module may write generated source maps
          to the manifest under `sourceMaps`.

error(message);

    Produces an error.  Errors generated during Cellscript evaluation will
	prevent any targets from being built, while errors generated during a build
	will not (Cell tries to build as many targets as possible).  In both cases
	the build will ultimately fail and a game manifest will not be generated.

files(pattern[, recursive]);

    Constructs a target for every file matching the specified pattern.  File
    targets are unique: They have no sources, and are always considered to be
    up to date.

    `pattern` is a wildcard (e.g. "*.png") combined with an optional SphereFS
    path specifying the directory to be searched.  If 'recursive' is true,
    subdirectories are searched as well.

install(directory, sources);

    Copies all specified Targets into a given directory at build time.  To copy
    existing files, you can use a files() builder to populate `sources`. (see
    above).

warn(message);

    Produces a warning.  Warnings will be reported to the user but will not
    prevent a successful build.

Target#fileName [read-only]

    Gets the full SphereFS path of the output file represented by this Target.

Target#name [read-only]

    Gets the name of this Target.  Usually this is just the output filename
    without any path information; however, targets constructed by files() may
    include a relative path to make it possible to reconstruct the original
    directory structure elsewhere.

new Tool(buildFunc[, status_text]);

    Constructs a Tool which can be used to build custom targets.  For example,
    you might create a Tool to build minified scripts or compress files.

    For each target built by the Tool, `buildFunc` is called and provided with
    the target filename as well as an array of filenames for the sources needed
    to build it.  The function is expected to create the target file or, if
    it already exists, to update its modification date.  If it doesn't, a build
    warning or error will result.

    `buildFunc` has the signature:
        function(outFileName, inFileNames)

    `status_text` is how Cell will describe the build step, e.g. "compiling" or
    "compressing".  If the status text is omitted, "building" is the default.

Tool#stage(filename, sources);

    Instructs Cell to build `filename` using this Tool.  Returns a Target
    object representing the target file.


`compiler` Module
------------------

This module allows you to use ECMAScript 2015 features such as destructuring
assignment and arrow functions in Sphere games.  These syntax features are not
natively supported by Duktape (the JavaScript engine used in miniSphere), but
can be used by translating the ES 2015 scripts to ES5 first.

To use the `transpile()` function exposed by this module, add one (and only
one!) of the following lines to the top of your Cellscript:

    import { transpile } from 'compiler';  // .mjs only
    const transpile = require('compiler').transpile;

transpile(targetPath, sources);

    Stages a build that translates each Target in `sources` from ES2015 to ES5
    and places the output into the directory named by `targetPath`.  Filenames
    ending in `.mjs` are treated as ES2015 modules; anything else is treated as
    a normal script.
    
    Note: `import` and `export` keywords are supported only in ES2015 modules.
          Using them in a normal script will produce a SyntaxError.


`minify` Module
---------------

`minify` allows you to minify scripts, which may allow them to compress better
when packaged in a SPK and also serves to obfuscate your game's source code
(note, however, that minification can be reversed, at least partially, with the
proper tools).

To use this module, add one of the following lines to the top of your
Cellscript:

    import minify from 'minify';  // .mjs only
    const minify = require('minify');

minify(targetPath, sources);

    Stages a build that runs each Target in `sources` through a JS minifier and
    places the resulting scripts in the directory named by `targetPath`.
