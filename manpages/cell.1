.TH CELL 1 "2017-07-20" "miniSphere 4.7.0" "miniSphere Game Development Kit"
.SH NAME
cell \- Sphere v2 game compiler and packager
.SH SYNOPSIS
.nh
.na
.TP 5
.B cell
.RB [ \-i
.IR indir ]
.RB [ \-o
.IR outdir ]
.RB [ \-p
.IR spkfile ]
[\fB\-\-debug\fR]
.RI [ targetname ]
.ad
.hy
.SH DESCRIPTION
Cell compiles and packages games for use with a Sphere v2 game engine such as miniSphere.
The build process is controlled by a JS script named
.I Cellscript.js
in the root of the game's source tree.
.P
A minimal Cellscript for a Sphere v2 game might look like this:
.P
.RS 0
    describe("Showdown at 8:12", {
.RS 0
        author: "maggie the Pigg",
.RS 0
        summary: "Have fun getting eaten!",
.RS 0
        resolution: '320x240',
.RS 0
        main: 'scripts/main.js',
.RS 0
    });
.RS 0
.
.RS 0
    install('@/', files('*', true));
.P
The above script packages the entire source tree, which is usually overkill.
At that point it would be simpler to write the
.I game.json
file manually, archive the entire source tree, and distribute the archive, forgoing Cell entirely.
The real power of Cell comes from its target system, of which the
.B files()
function used above is just one component.
.P
In Cell, a
.I target
represents the output of a single step in the build process.
Targets may either be
.I installed
(using the
.B install()
function, as illustrated in the example above), such that they become part of the final game package, or
used as a
.I dependency
in building another asset.
For example, you might build a tileset from a set of image files.
With a properly-written Cellscript, Cell can figure out all the dependencies for you, and build everything in the proper order to make a working package.
.SH TARGETS
.TP
.B files(pattern[, recursive = false])
Constructs a set of targets representing all files matching a specified pattern.
.B files()
is unique among targets in that it doesn't actually build anything - the files named are used as-is.
However, like all other targets, a
.B files()
asset may be installed directly (which will copy the files into the final package), or used as input for building another target.
.P
Target functions only declare assets.
At build time, Cell will compile only those targets which are part of the dependency chain for a target which is ultimately installed into the game package.
Therefore, you must pass any targets which need to be included in the final package to the
.B install()
function:
.TP
.B install(subdir, targets)
Install one or more targets. The
.I subdir
parameter specifies the directory where the asset will be installed.
Because Cell uses SphereFS to sandbox the build, you must prefix the directory path with
.B @/
to install the target into the game package.
(note: Recursive
.B files()
targets, when installed, will recreate the matching portion of the original directory tree in the install location.)
.SH READ MORE
Complete API documentation for Cell has been installed in
.BR /usr/share/doc/minisphere .
Refer to
.B cellscript-api.gz
to learn about everything that can go into a Cellscript.
.SH BUGS
Report any bugs found in miniSphere or the GDK tools to:
.br
.B Bruce Pascoe <fatcerberus@icloud.com>
.SH SEE ALSO
.BR sphere (1),
.BR ssj (1)
