.TH SSJ 1 "xxxx-xx-xx" "miniSphere-X.X.X" "miniSphere Game Development Kit"
.SH NAME
ssj \- the JavaScript debugger for miniSphere
.SH SYNOPSIS
.nh
.na
.TP 4
.B ssj
.RB [ \-\-no\-pause ]
.RB [ \-\-attach " | "
.IR gamefile ]
.ad
.hy
.SH DESCRIPTION
When used in combination with miniSphere, SSJ allows you step through a game's code and track its state as it executes.
In this regard it is similar in purpose to other CLI debuggers such as GDB.
The debugger enables you to diagnose bugs and crashes as they happen by tracking program variables, function calls, and objects, all while your game is still running.
.P
Using SSJ, you have to ability to:
.IP \(bu 3
Step through a game's source code one line at a time.
This lets you see the code paths the game takes and often helps illuminate difficult-to-understand bugs.
.IP \(bu 3
Track local variables and their values.
This allows you to see if the game assigns the wrong value to a variable, the effects of which may not manifest until much later on.
It is also possible to change the value of a variable in realtime.
.IP \(bu 3
Examine the contents of JavaScript objects.
Often it's not enough seeing only primitive values and you will need to drill down into an object's properties in order to understand a bug.
.IP \(bu 3
Set breakpoints.
Sometimes you have a good idea of where a bug is, and single-stepping to that point would be too tedious.
By setting a breakpoint on a line of source code, the debugger will automatically pause execution when that line is reached.
.IP \(bu 3
View debug traces.
Games will often log interesting events using
.B ssj.trace()
or the
.B console
object.
SSJ will let you see that output.
.P
Unless you use the
.B \-\-attach
option (see below), SSJ will start miniSphere for you.
This avoids to need to open a separate terminal for debugging.
Simply provide the name of a Sphere game directory or package as the last argument to the
.BR ssj (1)
command, and SSJ will do the rest.
.SH OPTIONS
.TP
.BR \-c ", " \-\-attach
Connects to a running game which was starting using the
.BR spherun (1)
command.
This can be invaluable by allowing you to debug hard-to-reproduce bugs when they happen.
.TP
.BR \-\-no\-pause
Sends a resume command upon attachment.
Normally SSJ automatically pauses execution so you can see the program exactly as it was when the debugger attached.
Use the
.B \-\-no\-pause
option to override this behavior.
.TP
.B \-\-version
Show the version number of SSJ along with the version numbers of any libraries it depends on.
.SH COMMANDS
Once attached, SSJ provides a large set of tools for you to use in debugging your game.
Since SSJ is a console debugger, these are provided through a command-line interface.
Below is a list of all commands supported by this version of SSJ:
.TP
.BR backtrace " or " bt
View the contents of the call stack.
This allows you to see which function calls are in progress and is especially useful in tracing your game's execution path leading up to an error.
.TP
.BR breakpoint " or " bp
Set a breakpoint at
.IR file:line .
When you have an idea in which part of the program a bug resides but aren't sure of the exact cause, breakpoints can be invaluable.
When the breakpoint is reached, execution will pause, leaving SSJ in control.
.B breakpoint
will show the ID number of the set breakpoint, which you will need if want to clear it later using
.BR clearbreak .
.TP
.BR clearbreak " or " cb
Clear a breakpoint established using
.BR breakpoint .
When you no longer need a breakpoint, you should clear it to prevent execution from pausing in that spot again.
To list active breakpoints and their indices, simply enter
.B breakpoint
with no arguments.
.TP
.BR continue " or " c
Resume normal execution.
If a breakpoint is hit or an error is thrown which is not caught, SSJ will pause execution again.
.TP
.BR down " or " d
Move down the callstack relative to the selected frame, towards the innermost call.
A number can be provided which specifies the number of frames to move.
If no argument is given,
.B down
moves down by one (1) frame.
.TP
.BR eval " or " e
Evaluate a JavaScript expression.
This works exactly like JavaScript
.B eval()
and allows you to examine objects, assign to variables, or anything else you can do with a line of code.
The expression is evaluated in the context of the selected stack frame.
Only enumerable properties are displayed for objects.
.TP
.BR examine " or " x
Evaluate a JavaScript expression.
If the result is a primitive value such as a string or number,
.B examine
works exactly like
.BR eval .
If the result is an object, all of its properties (including non-enumerable), their attributes, and their values are listed in long form.
.TP
.BR frame " or " f
Select a callstack frame to examine.
Use
.B backtrace
to see the full list of frames on the callstack.
When SSJ pauses execution, the innermost JavaScript frame is selected, which corresponds to the function call in progress.
Sometimes it's necessary when investigating a bug to view the state earlier in the call chain.
The
.frame
command changes the context used for the following commands:
.BR eval ", " examine ", " list ", and " vars .
The program counter isn't affected:
.B continue
and stepping commands will resume in the innermost call regardless of the stack frame selected.
.TP
.BR list " or " l
Print a few lines of source code surrounding the line currently being executed.
By default, 10 lines of source are shown.  If you provide a number with the
.B list
command, that number of lines will be printed.
.TP
.BR stepover " or " s
Execute the next line of source code, including all function calls in their entirety.
.TP
.BR stepin " or " si
Execute the next line of source code.
If a function is called, execution will pause at the start of that function.
This lets you trace into functions.
.TP
.BR stepout " or " so
Continue execution until the active function call returns.
Execution will pause again at the call site.
.TP
.BR up " or " u
Move up the callstack relative to the selected frame, towards the outermost call.
A number can be provided which specifies the number of frames to move.
If no argument is given,
.B up
moves up 1 frame.
.TP
.BR vars " or " v
Show local variables for the selected stack frame along with all primitive values.
Non-primitive values such as objects and functions are displayed simply as "{...}" so you will need to use the
.BR eval " or " examine
commands to view their content.
.TP
.BR where " or " w
Show the function name, filename and current line number for the innermost JavaScript stack frame, along with the line of code currently being executed.
This can help you to regain your bearings after an extended debugging session.
.TP
.BR quit " or " q
Quit SSJ.
This will detach the debugger and return you to the shell.
In most cases the miniSphere debug target will also close, unless SSJ was started with the
.B -c
option to connect to a running instance.
.P
If you need help with any of these commands while using SSJ, you can use the
.B help
command.
.B help
with no arguments will show the list of usable commands and a short summary of the function of each.
If you need help with a specific command, simply provide that command name as an argument to
.BR help .
.SH BUGS
Report any bugs found in miniSphere or the GDK tools to:
.br
.B Bruce Pascoe <fatcerberus@icloud.com>
.SH SEE ALSO
.BR spherun (1),
.BR cell (1)
