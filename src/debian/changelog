minisphere (4.7.0~trusty) trusty; urgency=low

  * Adds support for creating 2D (orthographic) and 3D (perspective) projection
    matrices.
  * Adds support for setting a clipping rectangle when rendering to a `Surface`.
  * Adds new `VertexList` and `IndexList` objects, used to store vertices and
    indices, respectively, directly on the GPU for fast access at render time.
  * Adds a new `.transform` property to `Surface` which allows changing the
    surface's projection matrix.
  * Adds new methods to `Model` for setting shader uniforms: `.setBoolean()`,
    `.setFloatArray()`, and `.setIntArray()`.
  * Adds `Socket#connectTo()` which allows the same socket object to be used for
    multiple sessions.
  * Adds the engine version number to the string returned by `Sphere.Platform`.
  * Adds support for the Sphere v1 `CreateSpriteset()` and `Spriteset#save()`
    functions.
  * Changes the signature of the `Shape` constructor in order to support vertex
    and index lists and make it easier to use.
  * Changes `FS.readFile()` and `FS.writeFile()` to work directly with strings
    instead of ArrayBuffers.
  * Removes support for GPUs without shader support.  If the engine can't create
    a shader-capable display, it will now simply fail to start rather than trying
    to fall back on the fixed-function pipeline.
  * Renames SSJ to SSj, with a lowercase J, to make the name more recognizable.
  * Renames `Sphere.APIVersion` to `Sphere.Version`.
  * Fixes several limitations in the internal handling of spritesets which were
    preventing full Sphere 1.x compatibility.
  * Fixes several bugs in internal Dispatch job management, including one that
    can cause the engine to crash with a segfault.
  * Fixes a bug where setting the clipping box out of bounds has no effect.
  * Fixes excessive OpenGL state changes in the internal rendering logic, vastly
    improving performance for games using the Sphere v2 graphics API.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Thu, 20 Jul 2017 00:00:00 -0500

minisphere (4.6.0) trusty; urgency=low

  * When using ES6 modules (`.mjs`), the main module can now `export default` a
    class and miniSphere will automatically instantiate it and call its `start()`
    method.  This mirrors how Sphere v1 engines call the global `game()` function
    on startup.
  * Adds a new `Sample` class which works like `Sound` but loads the sound into
    memory instead of streaming it and allows multiple instances to be played at
    the same time.
  * Adds methods to `Model` for setting vector-valued shader uniforms.
  * Adds `Transform#matrix`, allowing direct access to the individual matrix
    cells of a transformation.
  * Adds back the `SSJ` object, to allow sending text to the attached debugger
    (and optionally, to standard output).
  * Adds `Prim.blitSection()`, to allow drawing only part of an image.
  * Adds `Console.initialize()` which must now be called manually to enable the
    debug console.  Simply doing `require('console')` is no longer enough.
  * Adds a new module, `sphere-runtime`, which brings together all the standard
    modules and allows multiple symbols to be imported simultaneously by using
    `import {}`.
  * Adds support for `Sphere.Game` in Cellscripts, allowing the data in the JSON
    manifest to be manipulated directly.
  * Adds more missing Sphere v1 API functions, further improving compatibility.
  * Renames several standard modules, e.g. `term` becomes `console`.
  * Renames `Prim` functions to better reflect their immediate nature and improve
    code readability, at the expense of some extra verbosity.  For example,
    `Prim.line()` becomes `Prim.drawLine()`.
  * Renames `defScenelet()` to `Scene.defineAction()`.
  * Removes the `console` object from the Core API, as it turned out to be easily
    confused with the standard console module.
  * Removes the `pact` module from the standard library.
  * Removes the `minify` module from Cell's standard library.
  * Removes `describe()` from the Cellscript API.
  * Updates the internal graphics framework to use a pixel-perfect backbuffer,
    which improves screenshots and fixes several rendering-related bugs.
  * Updates the Sphere Studio project template with code to illustrate the use of
    ES6 class syntax as well as better showcasing the standard library.
  * Fixes a crash that happens when using `SetTileImage()` or `SetTileSurface()`.
  * Fixes a bug where an error thrown during execution of a Console command will
    crash the game with a JavaScript error.
  * Fixes a bug where Cell will sometimes not detect a filename conflict.
  * Fixes a bug where `Dispatch.onRender()` jobs are processed in reverse order
    following a call to `Dispatch.onUpdate()`, and vice versa.
  * Fixes a bug where miniSphere calls the render script before the update script
    on map engine startup, leading to compatibility issues.
  * Fixes a bug in `LineSeries()` and `PointSeries()` that made them always throw
    a "two or more vertices required" error.
  * Fixes a bug where Sphere v1 `Surface#cloneSection()` and `Surface#rotate()`
    could introduce graphical artifacts on some platforms.
  * Fixes a bug where Sphere v2 `Sound#pan` range is treated as [-255,+255]
    instead of the documented range of [-1.0,+1.0].

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 4 Jul 2017 00:00:00 -0500

minisphere (4.5.11) trusty; urgency=low

  * Now uses TypeScript to transpile Cellscripts, improving build times a bit.
  * Fixes a bug where SSJ repeats the previous action after an invalid command.
  * Fixes a bug where regular expressions containing an octal escape (e.g. `\3`)
    cause a SyntaxError.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Thu, 27 Apr 2017 00:00:00 -0500

minisphere (4.5.10) trusty; urgency=low

  * Fixes a bug where Sphere v1 `drawZoomedText()` ignores non-opaque pixels.
  * Fixes a bug in the RFN font loader where RFNv1 (grayscale) fonts are loaded
    without an alpha channel.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 3 Apr 2017 00:00:00 -0500

minisphere (4.5.9) trusty; urgency=low

  * Adds tolerance for shebang lines (`#!...`) at the start of JS source files.
  * TypeScript is once again used as the default ES6 transpiler.  A source map is
    embedded in each transpiled script that is used by SSJ Blue to facilitate
    debugging.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Fri, 31 Mar 2017 00:00:00 -0500

minisphere (4.5.8) trusty; urgency=low

  * Add `from#reduce()` API for reducing a collection to a single value.
  * Fixes spurious "target file unchanged after build" warnings when a target
    fails to build due to a compile-time error.
  * Fixes a bug where Cell doesn't delete target files that fail to build.
  * Fixes a Duktape bug where redeclaring an existing global binding as a `var`
    in global code resets its value to `undefined`.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 20 Mar 2017 00:00:00 -0500

minisphere (4.5.7) trusty; urgency=low

  * Adds a new `Thread` class which can be subclassed in ES6 to make threaded
    entities.
  * Changes `from#select()` to be lazy and removes `from#mapTo()` which is now
    redundant.  If you need to take a snapshot of the current query results,
    `.toArray()` can now be used for that purpose. 
  * Fixes an issue where `.mjs` files are not renamed to `.js` when transpiling.
  * Fixes various bugs in the Sphere Studio project template.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 14 Mar 2017 00:00:00 -0500

minisphere (4.5.6) trusty; urgency=low

  * Improves `for...of` iteration for `from()` queries.  Only the values will now
    be enumerated, rather than key/value pairs.
  * Reverts to Babel as the default ES6 transpiler pending source map support.
  * Fixes a bug where a CommonJS module without a trailing newline and with a
    C++-style comment (`//`) on the last line causes `require()` to throw an
    erroneous `SyntaxError`.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sat, 11 Mar 2017 00:00:00 -0500

minisphere (4.5.5) trusty; urgency=low

  * Changes the built-in ES6 transpiler (used by Cell's `compiler` module) to
    TypeScript, vastly improving compile times over Babel.
  * Fixes a bug where promise settlement causes an unexpected `TypeError`.
  * Fixes a bug where texture coordinates are not normalized for a `Shape` drawn
    directly to an off-screen surface (this also affected `prim.blit()`).

 -- Bruce Pascoe <fatcerberus@icloud.com>  Fri, 10 Mar 2017 00:00:00 -0500

minisphere (4.5.4) trusty; urgency=low

  * Adds a new global binding, `exports`, which maps to the global object, to
    better support certain transpilers (e.g., TypeScript).
  * Adds `for...of` support for `from()` queries.  Query results are enumerated
    as key/value pairs (`.v`, `.k`).
  * Adds `from.iterable()` for querying ES6 iterables.
  * Renames the Cell "transpile" module to "compiler" and makes `transpile()` a
    named export.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 5 Mar 2017 00:00:00 -0500

minisphere (4.5.3) trusty; urgency=low

  * Adds support for `Cellscript.mjs`.  if `Cellscript.js` is used, it will now
    be compiled as a script rather than a module.
  * Adds `.mjs` module support for Cellscript `require()`.
  * Fixes a bug in `from.Object()` where no object properties are enumerated.
  * Fixes a bug where `term.print()` repeats its second parameter for every one
    beyond that.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 28 Feb 2017 00:00:00 -0500

minisphere (4.5.2) trusty; urgency=low

  * Changes Cell `transpile` module to use automatic mode for transpile().  `.js`
    files are compiled as scripts (which is Sphere 1.x compatible), while `.mjs`
    files are compiled as ES6 modules.  This is in line with how Node.js will
    eventually implement ES6 module support.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sat, 25 Feb 2017 00:00:00 -0500

minisphere (4.5.1) trusty; urgency=low

  * Adds `PurwaBlue` and `RebeccaPurple` as predefined colors.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 22 Feb 2017 00:00:00 -0500

minisphere (4.5.0) trusty; urgency=low

  * Adds support for game-specific save directories.  Set `saveID` in a game's
    JSON manifest to control the subdirectory to which `~/` is mapped.
  * Adds a new `FileStream` constructor, which replaces `FS.openFile()` and has
    a more intuitive API.
  * Adds a `screen.fullScreen` property to change the fullscreen mode at runtime.
  * Adds a compile-time warning for Cell targets with no sources (the tool will
    never be invoked in that case).
  * Adds support to Cell for SGMv1 manifest generation, allowing limited
    cross-compatibility with Sphere 1.x to help ease migration.
  * Renames the `Image` class to `Texture` to support future compatibility with
    Oozaru.
  * Renames `system.now()` to `screen.now()`.
  * Renames the `system` object to `Sphere`, and fixes capitalization for runtime
    constants, e.g., `system.version` -> `Sphere.Version`.
  * Renames the `--window` command-line option to `--windowed`.
  * Changes `Color#name` to return InterCaps names for predefined colors, e.g.
    "DodgerBlue" instead of "dodgerblue".
  * Changes `Sphere.sleep()` to use its pre-4.3 behavior, taking a value in
    seconds and suspending all engine activity, including rendering, until the
    timeout expires.
  * Fixes a bug where calling `FileStream` methods on a disposed stream can cause
    miniSphere (and Cell) to crash.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 20 Feb 2017 00:00:00 -0500

minisphere (4.4.4) trusty; urgency=low

  * The engine is now called miniSphere, with a capital 'S', both to highlight
    its nature as a JavaScript-powered engine and to make the name more readily
    recognizable.
  * Adds `for...of` enumeration support for `from()` queries.
  * Improves color coding of SSJ output to give a better picture of what's going
    on.  Engine state is highlighted in cyan; debugger state is highlighted in
    gold.
  * Improves Symbol support by enabling native Symbols in Duktape.
  * Improves the Sphere Studio project template: the sample Cellscript now uses
    `import` to pull in the transpile function, showcasing Cell's new built-in
    ES 2015 support.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 6 Feb 2017 00:00:00 -0500

minisphere (4.4.3) trusty; urgency=low

  * Adds support for ECMAScript 2015 syntax in Cellscripts and modules.
  * Adds a new API function, `Color.is()`, for comparing Colors without regard to
    their alpha channels.
  * Fixes a bug where `this` is bound to the global object in top-level module
    code instead of the `module` object like Node.js.
  * Fixes a bug where `require()` incorrectly picks up files with `.ts` or
    `.coffee` extensions.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 1 Feb 2017 00:00:00 -0500

minisphere (4.4.2) trusty; urgency=low

  * Fixes a bug where specifying a nonexistent directory in a Cellscript
    `files()` directive crashes the compiler.
  * Fixes a bug where `transpile.v1()` parses input files in strict mode, causing
    some otherwise valid Sphere v1 legacy code to be rejected with a syntax
    error.
  * Fixes a bug which causes Cell to produce a spurious "target file not built"
    error if a Tool throws an exception.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 30 Jan 2017 00:00:00 -0500

minisphere (4.4.1) trusty; urgency=low

  * Fixes a bug which caused the Arch and Ubuntu installations of Cell to be
    unable to find the standard library modules.
  * Fixes a bug which caused minisphere to crash on startup when trying to load
    a malformed Sphere v2 manifest.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sat, 28 Jan 2017 00:00:00 -0500

minisphere (4.4.0) trusty; urgency=low

  * Overhauls the Cellscript API: `require()` is supported, file paths are
    resolved using SphereFS semantics, and Cellscripts and modules can now define
    custom targets and build tools for the ultimate in extensibility.
  * Improves the naming of the `FS` functions to make their intent clearer.  For
    instance, `FS.mkdir()` -> `FS.createDirectory()`.
  * Strengthens the SphereFS sandbox.  Only the user directory (`~/`) is now
    writable; passing any other path to an API that requires write access will
    result in a TypeError.
  * Simplies the command-line interface for Cell.  You can now initiate a build
    simply by running `cell` (with no additional options) from any directory with
    a Cellscript in it.
  * Adds `FS.readFile()` and `FS.writeFile()` which allow reading and writing
    an entire file in a single operation.
  * Adds a `screen.frameSkip` property to allow games to control frame skipping.
  * Adds support for ECMAScript 2015 built-ins like Map and Set using a polyfill
    which is loaded automatically on startup.
  * Adds a `--clean` command line option to have Cell delete all artifacts from
    the most recent build.
  * Adds a `--rebuild` command line option to have Cell build all targets, even
    if they are already up to date.
  * Adds support to Cell for ECMAScript 2015+ transpilation via Babel.
  * Adds support to Cell for minification via Babili.
  * Improves Sphere 1.x compatibility in various corner cases, and adds several
    missing Sphere v1 APIs.
  * Dispatch API functions will no longer accept a JavaScript source code string
    as a callback; the callback must now always be a function.
  * Improves the miniRT API documentation.
  * Fixes ANSI text coloration for SSJ in Windows 10 Anniversary Update and
    later.
  * Fixes an issue where Cell doesn't automatically rebuild a game if the
    Cellscript is modified between runs.
  * Fixes a bug where CommonJS module filenames don't get mapped to their source
    names when using SSJ Blue, causing the debugger to not be able to find them.
  * Fixes a bug where the miniRT terminal can get rendered before other threads.
  * Fixes a bug where `random.sample()` sometimes returns `undefined`.
  * Fixes a bug where error attribution doesn't work properly if `Duktape.act()`
    is not available at the time of the error.
  * Fixes a bug where a non-Error exception thrown from global code produces a
    confusing "script not found" error.
  * Fixes a bug where `CreatePerson()` won't accept a Spriteset object.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Fri, 27 Jan 2017 00:00:00 -0500

minisphere (4.3.8) trusty; urgency=low

  * Fixes a bug which caused `from#anyIn()` to always return `false`.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 4 Dec 2016 00:00:00 -0500

minisphere (4.3.7) trusty; urgency=low

  * Adds experimental support for ECMAScript 2015 `Symbol()` and `Symbol.for()`.
  * Adds a bunch of new query operators: shuffle, random, sample, ascending,
    descending, and from.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Fri, 2 Dec 2016 00:00:00 -0500

minisphere (4.3.6) trusty; urgency=low

  * Adds support for composable from() queries, allowing partial application of
    queries as in LINQ.
  * Renames from#map() to from#mapTo().

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 23 Nov 2016 00:00:00 -0500

minisphere (4.3.5) trusty; urgency=low

  * Adds `from#allIn()`, `from#anyIn()`, and `from#anyIs()`, providing a quick
    way to check whether a query matches specific values without the need to
    write a predicate function.
  * Adds `from#first()` and `from#last()` to get the very first or very last
    result of a query, respectively.
  * Adds support for `Math.cbrt()`, `Math.log2()`, `Math.log10()`, and
    `Math.trunc()`.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 20 Nov 2016 00:00:00 -0500

minisphere (4.3.4) trusty; urgency=low

  * Adds a new miniRT module, "from", which enables performing queries against
    the contents of objects, arrays, and strings.  This replaces the undocumented
    third-party "link" module which was included with previous versions of the
    engine.
  * Adds support for ECMAScript 2015 `Object.is()` and `Math.hypot()`.
  * Fixes a bug where `Color.of()` was undefined and not callable.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Thu, 17 Nov 2016 00:00:00 -0500

minisphere (4.3.3) trusty; urgency=low

  * Adds a new miniRT "test" module based on the CommonJS Unit Testing/1.0
    specification.
  * Adds support for ECMAScript 2015 `Object.assign()`.
  * Fixes `Abort()` to exit the game unconditionally, like Sphere 1.x.
  * Fixes `ExecuteGame()` resetting the fullscreen/window state.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Fri, 11 Nov 2016 00:00:00 -0500

minisphere (4.3.2) trusty; urgency=low

  * Adds an API call, `Dispatch.cancelAll()` to cancel all pending one-time jobs
    (recurring jobs must still be cancelled individually).
  * Adds support for ECMAScript 2015 binary (`0b1000`) and octal (`0o1454`)
    notation.
  * Improves the Sphere Studio project template to show off more features and
    better illustrate how the Sphere v2 API works.
  * Improves Dispatch API priority handling.  Update jobs are now executed in
    order from highest to lowest priority, rather than the other way around.
  * Fixes jobs continuing to run after an uncaught exception.
  * Fixes uncaught exceptions within the central frame loop crashing the engine
    instead of displaying the error screen.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 9 Nov 2016 00:00:00 -0500

minisphere (4.3.1) trusty; urgency=low

  * Improves Sphere v2 behavior: minisphere will now run a frame loop until there
    are no more Dispatch API jobs active before exiting.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 8 Nov 2016 00:00:00 -0500

minisphere (4.3.0) trusty; urgency=low

  * Adds a new Dispatch API for setting up asynchronous jobs.  Jobs are called
    from the event loop; for example, `Dispatch.onUpdate()` is processed at the
    start of every frame.
  * Adds support for the JavaScript Reflect API.
  * Adds native support for JavaScript Promises via a polyfill.
  * Adds `struct.Reader` and `struct.Writer` which allow games to read and write
    binary data from files and network sockets.
  * Adds a `.fileName` property to objects such as Image and Sound, which returns
    the canonicalized name of the file the object was loaded from.
  * Adds `assert()` as an alias for `assert.ok()`, like in Node.js.
  * Renames the `fs` global object to `FS` to match other namespace-like objects.
  * Renames `mouse` to `Mouse.Default` to allow future support for multiple mice.
  * Renames `keyboard` to `Keyboard.Default` to allow future support for multiple
    keyboards.
  * Renames `ShapeGroup` to `Model`, better describing the object's purpose.
  * Removes the superfluous `SSJ` functions from the API.
  * Fixes several bugs discovered since minisphere 4.2.4 was released.
  * Updates the Sphere v2 API to use frame-perfect timing throughout.  For
    example, `system.now()` returns the number of frames processed since engine
    start.
  * Improves Sphere 1.x compatibility.  Many games which historically didn't run
    properly in minisphere, including Kefka's Revenge and Trial and Error, should
    now be fully playable.
  * Updates error messages to be more concise, making it clearer what went wrong
    at a quick glance.
  * miniRT no longer commandeers the legacy update and render scripts for itself.
  * When debugging with Sphere Studio, the gold "ssj" watermark in the bottom
    right is changed to blue to more easily distinguish interactive debugging
    sessions from command-line sessions.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 7 Nov 2016 00:00:00 -0500

minisphere (4.2.4) trusty; urgency=low

  * Adds streaming support for `TextDecoder`.
  * `system.abort()` now aborts unconditionally, as described in the API
    documentation.
  * Fixes a bug in the UTF-8 validation logic that caused Unicode strings to be
    double-encoded, leading to undesirable side effects and in rare cases, a
    crash.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Fri, 7 Oct 2016 00:00:00 -0500

minisphere (4.2.3) trusty; urgency=low

  * Adds support for the new JavaScript exponentiation operator (e.g.
    `x ** 2`), allowing powers to be calculated without the performance
    impact of a `Math.pow()` call.
  * `term.log()` is renamed to `term.print()`.
  * Updates the Encoding API implementation to more closely follow the
    algorithms described in the WHATWG standard.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Thu, 6 Oct 2016 00:00:00 -0500

minisphere (4.2.2) trusty; urgency=low

  * Adds a new property, `term.visible` to the `term` module and removes the
    `.show()` and `.hide()` methods.
  * Fixes the `struct` and `logger` modules, which were unintentionally broken by
    the changes in 4.2.0.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 28 Sep 2016 00:00:00 -0500

minisphere (4.2.1) trusty; urgency=low

  * The `ssj` global is now called `SSJ`, to align with usual JavaScript naming
    conventions for namespace-like objects.
  * The `terminal` standard library module is now called `term`.
  * Passing an invalid argument to a miniRT `random` module function will now
    result in a hard `AssertionError`, rather than just a debugger trap.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 21 Sep 2016 00:00:00 -0500

minisphere (4.2.0) trusty; urgency=low

  * Adds native joystick support to the Sphere v2 API.  Previously, using a
    joystick or gamepad required calling Sphere v1 legacy functions.
  * Adds a new module to miniRT, `joy`.  This provides a simplified joystick
    interface for games that don't need the full flexibility of the Sphere v2
    Joystick API.
  * Adds W3C Encoding support (`TextEncoder` and `TextDecoder` objects) to the
    Sphere v2 API.  This allows reading and writing text from ArrayBuffer views.
  * Simplifies the FileStream API.  All methods for reading and writing typed
    values from files have been removed, leaving only `read()` and `write()`
    which deal with ArrayBuffers directly.
  * The `kb` built-in object is now called `keyboard`, making keyboard input code
    significantly easier to read at the cost of some extra verbosity.
  * Fixes a long-standing map engine bug where the input person(s) can't be moved
    with the joystick.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 14 Sep 2016 00:00:00 -0500

minisphere (4.1.1) trusty; urgency=low

  * When starting a game with a JSON manifest, the main script is now run as a
    CommonJS module unless the manifest explicitly specifies `version: 1`.
  * `console` methods now actually send text to the console.
  * Sphere Studio now runs minisphere Console at V0 verbosity by default.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 24 Aug 2016 00:00:00 -0500

minisphere (4.1.0) trusty; urgency=low

  * Adds a new module to the standard library: `assert`, based on the Node.js
    built-in assert module.  Unlike `ssj.assert()`, the functions in this module
    throw an `AssertionError` when an assertion fails.
  * Renames a few `system` APIs.  See `RELEASES.md` for details.
  * Adds an option to show `ssj.trace()` output while debugging a game with
    Sphere Studio.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 22 Aug 2016 00:00:00 -0500

minisphere (4.0.1) trusty; urgency=low

  * `system.extensions` now includes properties for individual extensions.  Each
    has a value of `true`, which allows games to check for extensions via, e.g.
    `if (system.extensions.sphere_stateful_rng) { ... }`.
  * Fixes a bug which caused the `system.extensions` array to be missing entries.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 14 Aug 2016 00:00:00 -0500

minisphere (4.0.0) trusty; urgency=low

  * Introduces the new Sphere v2 API.  The entire Sphere v1 API, including the
    map engine, has been deprecated and is no longer recommended for use in new
    games.  For information on using the functions in the new API, see
    `docs/sphere2-api.txt`.
  * miniRT has been overhauled and repurposed as the reference implementation of
    the Sphere v2 standard library.  See `docs/minirt-api.txt` for more
    information.
  * Objects created using a Sphere v2 function--such as the `Image` constructor,
    `Color.Black` et al., and so on--are no longer compatible with the Sphere v1
    API.
  * Removes the constructors for legacy types such as ByteArray.
  * Removes support for on-the-fly transpilation of TypeScript and CoffeeScript.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Fri, 12 Aug 2016 00:00:00 -0500

minisphere (3.3.0) trusty; urgency=low

  * Now uses xoroshiro128+ as the random number generator instead of the slower
    Mersenne Twister.
  * Adds a new property to the RNG object, `RNG.state`.  This allows you to save
    and restore the internal state of the random number generator, for example to
    deter save scumming.
  * Adds a bunch of new API calls to make working with Color objects easier:
    `Color.fade()`, `Color.of()`, `Color.mix()` (which supersedes the old
    blending functions), `Color#name`, and a bunch of predefined colors such as
    `Color.Chartreuse`, `Color.Blue`, etc.
  * `Font`, `Mixer`, `ShaderProgram` and `WindowStyle` now include static
    `.Default` properties which refer to the corresponding built-in default
    assets.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 31 May 2016 00:00:00 -0500

minisphere (3.2.0) trusty; urgency=low

  * The module system has been overhauled to work more like Node.js, and now has
    support for `package.json` files, parsing JSON files as objects, and useful
    APIs such as `require.cache`, `module.loaded`, and `module.require`.
  * `require()` can now load JS modules from anywhere in a game's file system by
    prefixing the module ID with a SphereFS alias (`@/`, `~/`, or `#/`).
  * Adds support for `console.log()` and friends.  `stdout` is reserved for
    under-the-hood logging, so `console` output will only be visible when SSJ is
    attached.
  * Improves frameskip behavior: The frame timer is now reset only if the skip
    limit is hit.  This should ensure a more consistent update rate even under
    lag conditions.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 22 May 2016 00:00:00 -0500

minisphere (3.1.2) trusty; urgency=low

  * Fixes an issue where sounds were reinitialized whenever a script called
    `Sound#play()` (including the first time), potentially triggering a deadlock
    bug in Allegro 5.0.  This affects Linux only, as Allegro 5.2 is used on
    Windows.
  * Fixes a regression in minisphere 3.1.0 which could cause games with an
    otherwise valid `.s2gm` manifest to fail to start with an Unsupported Engine
    error.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Wed, 11 May 2016 00:00:00 -0500

minisphere (3.1.1) trusty; urgency=low

  * Fixes a bug in miniRT/music where it tried to call `console.write()` instead
    of `console.log()`, causing it to throw an error and potentially crash the
    game when logging error messages.
  * Sound.play() will now accept a Mixer as its second or third argument.
    Previously the Mixer had to be passed to the Sound constructor, which was
    awkward.
  * The map engine now uses its own mixer for map-defined BGM.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 10 May 2016 00:00:00 -0500

minisphere (3.1.0) trusty; urgency=low

  * SphereFS now uses single-character aliases: `#/` for built-in engine assets,
    `@/` for the root of the sandbox, and `~/` for the user data directory (for
    save data)
  * Changes the user data directory name back to "minisphere" to be more friendly
    to Linux users.
  * Adds some new components to miniRT: miniRT/binary for easy loading of
    structured binary data, miniRT/xml for XML parsing and DOM generation, and
    miniRT/prim to pre-render expensive-to-draw primitives like circles.
  * Adds a new Transform object which allows working with transformation
    matrices.
  * Improves the Galileo API: Shapes can now be drawn directly, Groups have a
    `transform` property which allows their transformation matrices to be
    manipulated, and shader uniforms can be set using `group.setInt()`,
    `group.setFloat()`, and `group.setMatrix()`.
  * Adds new Galileo Shape types `SHAPE_LINE_LOOP` and `SHAPE_LINE_STRIP`.
  * minisphere now looks for CommonJS modules in `lib/` instead of `commonjs/`.
  * `Async()` is now called `DispatchScript()` for API consistency.
  * `ListeningSocket` is now called `Server`.
  * You can now use `-0` through `-4` command line options to specify the
    engine log verbosity level.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 7 May 2016 00:00:00 -0500

minisphere (3.0.8) trusty; urgency=low

  * Fixes a bug where minisphere would crash instead of showing an error
    message if it was unable to create a render context.
  * SSJ will now continue with the previous course of action if given a null
    command.  This only works for certain commands.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 17 Apr 2016 00:00:00 -0500

minisphere (3.0.7) trusty; urgency=low

  * Fixes an issue where persons with large ignore lists would cause an inordinate
    amount of lag.  This was caused by the engine checking persons' ignore lists
    before their hitboxes.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Thu, 14 Apr 2016 00:00:00 -0500

minisphere (3.0.6) trusty; urgency=low

  * Reverts to the pre-3.0.4 method of map rendering.  It turns out that Allegro's
    sprite batcher is actually pretty awesome.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 11 Apr 2016 00:00:00 -0500

minisphere (3.0.5) trusty; urgency=low

  * Fixes a performance regression in 3.0.4 related to Galileo map rendering and
    animated tilesets.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sun, 10 Apr 2016 00:00:00 -0500

minisphere (3.0.4) trusty; urgency=low

  * Fixes a memory management bug in Galileo which caused it to leak potentially
    massive amounts of memory in games which generate a lot of Shape objects.
  * Fixes a bug in the Windows build where stdout couldn't be redirected.
  * Updates the map engine to use the Galileo graphics subsystem internally, which
    improves rendering performance in most cases.
  * Fixes a segfault when rendering a Galileo primitive with no vertices defined.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Sat, 9 Apr 2016 00:00:00 -0500

minisphere (3.0.3) trusty; urgency=low

  * While debugging in Sphere Studio, variables are now sorted alphabetically in
    the Debugger pane.
  * Fixes a bug where GetDefaultShaderProgram() would attempt to compile the same
    source for both the vertex and fragment shaders, causing the call to fail.
  * Implements RNG.random(), an API function which has been documented for a while
    without actually being present.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 5 Apr 2016 00:00:00 -0500

minisphere (3.0.2) trusty; urgency=low

  * Improves the file API: The FileStream object now includes methods for
    directly reading and writing integers, strings, and floats in addition to
    the standard ArrayBuffer-based I/O.
  * The Windows build now uses Allegro 5.2.0, the latest stable version.
  * Fixes a bug in the Sphere Studio debugger where pressing F10 would perform a
    Step Out instead of Step Over.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Fri, 1 Apr 2016 00:00:00 -0500

minisphere (3.0.1) trusty; urgency=low

  * Fixes a bug where running `minisphere` from the command line and giving an
    invalid or nonexistent game path would cause the engine to segfault trying
    to display an error message.
  * Adds Sphere 1.x API functions `SetLayerWidth()` and `SetLayerHeight()`.  For
    convenience, I also added `SetLayerSize()` to set both dimensions at once.
  * In Sphere Studio, the Debugger pane is now hidden when not actively
    debugging.  This helps maximize screen real estate without forcing the user
    to set the pane to autohide.
  * Fixes a bug where receiving a malformed source code request from the
    debugger would cause a segfault.  This wasn't a security risk right now, but
    might have become one in the future once I add remote debugging support.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Tue, 29 Mar 2016 00:00:00 -0500

minisphere (3.0.0) trusty; urgency=low

  * The Windows redistributable and GDK downloads have been combined into a single
    installer.  The engine is so compact that there's nothing gained from having
    separate installers.
  * minisphere is now officially supported on Linux! `.deb` binary and `.tar.gz`
    source packages will be provided for all minisphere releases going forward.
  * miniRT is completely revamped and modernized.  All miniRT components have been
    rewritten as CommonJS modules which allows them to be pulled in individually
    as needed, instead of all at once using a global RequireScript().
  * A complete API reference for miniRT is now included with the engine.
  * Introducing the brand-new command-line debugger, SSJ!  SSJ can be started by
    running `ssj <game-path>` on the command line.  This brings single-step Sphere
    debugging to non-Windows platforms for the first time!
  * Strengthens the SphereFS sandbox: Using absolute file paths is no longer
    supported and will result in a sandbox violation error.
  * Adds provisional TypeScript support.  minisphere uses `ts.transpile()`
    internally to convert TypeScript to JavaScript, so some TypeScript features
    may not work as expected.  See the release notes for more details.
  * User data (screenshots, save files, etc.) is now stored in `<docs>/Sphere 2.0`
    instead of `<docs>/minisphere` as it was in prior versions.  SPK packages can
    be placed into the `games` subdirectory to have the startup game automatically
    pick them up.
  * minisphere now looks for CommonJS modules in `~sgm/commonjs`.
  * Enhances `Assert()` behavior.  If an assertion fails and the debugger is
    attached, choosing not to continue will cause a prompt breakpoint instead of
    throwing an error.  If the debugger is not attached, any failing assertions
    will be logged to `stderr` but otherwise ignored.
  * Improves fullscreen behavior: Games are letter/pillarboxed to maintain their
    aspect ratio when switching into fullscreen mode.
  * Screenshots are now given meaningful names based on the game filename and
    current date instead of random characters.
  * The frame rate is now visible by default whenever a game is started using the
    `spherun` command, and has been moved to the lower right corner of the screen.
  * When the debugger is attached, the engine now shows a small "SSJ" watermark in
    the lower left corner of the screen as a reminder.
  * The engine now waits for sounds to stop playing before freeing them, even if
    the Sound object goes out of scope.  This allows a common Sphere idiom
    `new Sound("munch.wav").play()` to work as expected.
  * With the debugger attached, you can now press F12 to pause game execution and
    turn over control to the attached debugger.  This can be useful when trying to
    debug glitches that don't lead to an exception.
  * You can now change the minisphere Console verbosity level when developing in
    Sphere Studio by going to the Settings Center page.  V2 (high-level logging)
    is the default.
  * Vastly improves object inspection in the Sphere Studio debugger.  Object
    contents will be displayed in a treeview, allowing you to drill down into
    properties, alleviating the need to scroll through a potentially huge JSON
    dump.
  * The command to run minisphere Console from the command line has changed from
    `msphere` to `spherun`.  This will be the standard command to start a
    Sphere 2.0 engine in developer mode going forward.  The end-user engine has
    been renamed as well, to `minisphere`.
  * `RNG.vary()` is now named `RNG.uniform()`.
  * New API: `DebugPrint()`, for logging low-level debug information without
    cluttering the console.  `DebugPrint()` output is visible only with a debugger
    attached.
  * New API: `DoEvents()`.  This function can be called in a long-running loop to
    avoid locking up the engine when you don't need to render anything or
    otherwise disturb the backbuffer.
  * `Print()` now accepts multiple values, which are separated by spaces when
    printed.
  * The `sphere` global object alias has been renamed to `global`, which is more
    obvious and matches Node.js.  Code relying on the `sphere` alias will need to
    be updated to work with minisphere 3.0.
  * All minisphere API functions, constructors, and constants have been marked as
    non-enumerable, to avoid bloating the output when examining the global object
    in the debugger.  Everything is still fully writable and configurable, so as
    not to prevent monkey-patching.
  * Fixes memory leaks in both Cell and minisphere, including a major one in
    Cell's packaging code which could have caused it to run out of memory during
    the installation step.
  * minisphere will no longer fail to start if the underlying platform doesn't
    support shaders.  Instead, the Galileo `ShaderProgram` constructor will throw
    an error if called.  Shaders are always disabled when the engine is compiled
    against Allegro 5.0.

 -- Bruce Pascoe <fatcerberus@icloud.com>  Mon, 28 Mar 2016 00:00:00 -0500
